"""Add artifacts table

Revision ID: c8003d5b5f2f
Revises: d33e6481681d
Create Date: 2025-09-06 11:38:19.438370

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = 'c8003d5b5f2f'
down_revision: Union[str, None] = 'd33e6481681d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('artifacts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('node_id', sa.UUID(), nullable=False),
    sa.Column('filename', sa.String(length=255), nullable=False),
    sa.Column('original_filename', sa.String(length=255), nullable=False),
    sa.Column('file_path', sa.Text(), nullable=False),
    sa.Column('mime_type', sa.String(length=128), nullable=True),
    sa.Column('size_bytes', sa.BigInteger(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['node_id'], ['nodes.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_artifacts_node_id'), 'artifacts', ['node_id'], unique=False)
    op.drop_constraint(op.f('node_notes_id_fkey'), 'node_notes', type_='foreignkey')
    op.create_foreign_key(None, 'node_notes', 'nodes', ['id'], ['id'])
    op.alter_column('node_smart_folders', 'rules',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='DEPRECATED - Use rule_id instead',
               existing_nullable=True)
    op.alter_column('node_smart_folders', 'auto_refresh',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.drop_constraint(op.f('node_smart_folders_id_fkey'), 'node_smart_folders', type_='foreignkey')
    op.create_foreign_key(None, 'node_smart_folders', 'nodes', ['id'], ['id'])
    op.alter_column('node_tasks', 'status',
               existing_type=postgresql.ENUM('todo', 'in_progress', 'done', 'dropped', name='task_status'),
               server_default=None,
               existing_nullable=False)
    op.alter_column('node_tasks', 'priority',
               existing_type=postgresql.ENUM('low', 'medium', 'high', 'urgent', name='task_priority'),
               server_default=None,
               existing_nullable=False)
    op.alter_column('node_tasks', 'archived',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.drop_constraint(op.f('node_tasks_id_fkey'), 'node_tasks', type_='foreignkey')
    op.create_foreign_key(None, 'node_tasks', 'nodes', ['id'], ['id'])
    op.alter_column('node_templates', 'usage_count',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('node_templates', 'create_container',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.drop_index(op.f('ix_node_templates_category'), table_name='node_templates')
    op.alter_column('nodes', 'sort_order',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('rules', 'is_public',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_comment='Whether this rule can be used by other users',
               existing_nullable=False)
    op.alter_column('rules', 'is_system',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_comment='System-provided rules that cannot be edited',
               existing_nullable=False)
    op.create_index(op.f('ix_tags_owner_id'), 'tags', ['owner_id'], unique=False)
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.drop_index(op.f('ix_tags_owner_id'), table_name='tags')
    op.alter_column('rules', 'is_system',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_comment='System-provided rules that cannot be edited',
               existing_nullable=False)
    op.alter_column('rules', 'is_public',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_comment='Whether this rule can be used by other users',
               existing_nullable=False)
    op.alter_column('nodes', 'sort_order',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=False)
    op.create_index(op.f('ix_node_templates_category'), 'node_templates', ['category'], unique=False)
    op.alter_column('node_templates', 'create_container',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.alter_column('node_templates', 'usage_count',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=False)
    op.drop_constraint(None, 'node_tasks', type_='foreignkey')
    op.create_foreign_key(op.f('node_tasks_id_fkey'), 'node_tasks', 'nodes', ['id'], ['id'], ondelete='CASCADE')
    op.alter_column('node_tasks', 'archived',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
    op.alter_column('node_tasks', 'priority',
               existing_type=postgresql.ENUM('low', 'medium', 'high', 'urgent', name='task_priority'),
               server_default=sa.text("'medium'::task_priority"),
               existing_nullable=False)
    op.alter_column('node_tasks', 'status',
               existing_type=postgresql.ENUM('todo', 'in_progress', 'done', 'dropped', name='task_status'),
               server_default=sa.text("'todo'::task_status"),
               existing_nullable=False)
    op.drop_constraint(None, 'node_smart_folders', type_='foreignkey')
    op.create_foreign_key(op.f('node_smart_folders_id_fkey'), 'node_smart_folders', 'nodes', ['id'], ['id'], ondelete='CASCADE')
    op.alter_column('node_smart_folders', 'auto_refresh',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.alter_column('node_smart_folders', 'rules',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='DEPRECATED - Use rule_id instead',
               existing_nullable=True)
    op.drop_constraint(None, 'node_notes', type_='foreignkey')
    op.create_foreign_key(op.f('node_notes_id_fkey'), 'node_notes', 'nodes', ['id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_artifacts_node_id'), table_name='artifacts')
    op.drop_table('artifacts')
    # ### end Alembic commands ###

