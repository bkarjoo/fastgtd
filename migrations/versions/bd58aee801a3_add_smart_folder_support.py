"""Add smart folder support

Revision ID: bd58aee801a3
Revises: clean_slate_unified_nodes
Create Date: 2025-08-24 20:46:40.063006

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = 'bd58aee801a3'
down_revision: Union[str, None] = 'clean_slate_unified_nodes'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('node_smart_folders',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('rules', sa.JSON(), nullable=False),
    sa.Column('auto_refresh', sa.Boolean(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['nodes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_constraint(op.f('node_notes_id_fkey'), 'node_notes', type_='foreignkey')
    op.create_foreign_key(None, 'node_notes', 'nodes', ['id'], ['id'])
    op.alter_column('node_tasks', 'status',
               existing_type=postgresql.ENUM('todo', 'in_progress', 'done', 'dropped', name='task_status'),
               server_default=None,
               existing_nullable=False)
    op.alter_column('node_tasks', 'priority',
               existing_type=postgresql.ENUM('low', 'medium', 'high', 'urgent', name='task_priority'),
               server_default=None,
               existing_nullable=False)
    op.alter_column('node_tasks', 'archived',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.drop_constraint(op.f('node_tasks_id_fkey'), 'node_tasks', type_='foreignkey')
    op.create_foreign_key(None, 'node_tasks', 'nodes', ['id'], ['id'])
    op.alter_column('nodes', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('nodes', 'sort_order',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('tags', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('tags', 'sort_order',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
    op.drop_constraint(op.f('tags_owner_id_name_key'), 'tags', type_='unique')
    op.create_index(op.f('ix_tags_owner_id'), 'tags', ['owner_id'], unique=False)
    op.create_unique_constraint('uq_tag_owner_name', 'tags', ['owner_id', 'name'])
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=False)
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('gen_random_uuid()'),
               existing_nullable=False)
    op.drop_constraint('uq_tag_owner_name', 'tags', type_='unique')
    op.drop_index(op.f('ix_tags_owner_id'), table_name='tags')
    op.create_unique_constraint(op.f('tags_owner_id_name_key'), 'tags', ['owner_id', 'name'], postgresql_nulls_not_distinct=False)
    op.alter_column('tags', 'sort_order',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=False)
    op.alter_column('tags', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('gen_random_uuid()'),
               existing_nullable=False)
    op.alter_column('nodes', 'sort_order',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=False)
    op.alter_column('nodes', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('gen_random_uuid()'),
               existing_nullable=False)
    op.drop_constraint(None, 'node_tasks', type_='foreignkey')
    op.create_foreign_key(op.f('node_tasks_id_fkey'), 'node_tasks', 'nodes', ['id'], ['id'], ondelete='CASCADE')
    op.alter_column('node_tasks', 'archived',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
    op.alter_column('node_tasks', 'priority',
               existing_type=postgresql.ENUM('low', 'medium', 'high', 'urgent', name='task_priority'),
               server_default=sa.text("'medium'::task_priority"),
               existing_nullable=False)
    op.alter_column('node_tasks', 'status',
               existing_type=postgresql.ENUM('todo', 'in_progress', 'done', 'dropped', name='task_status'),
               server_default=sa.text("'todo'::task_status"),
               existing_nullable=False)
    op.drop_constraint(None, 'node_notes', type_='foreignkey')
    op.create_foreign_key(op.f('node_notes_id_fkey'), 'node_notes', 'nodes', ['id'], ['id'], ondelete='CASCADE')
    op.drop_table('node_smart_folders')
    # ### end Alembic commands ###

