"""init schema

Revision ID: a1cc11c1af6e
Revises: 
Create Date: 2025-08-09 23:12:57.470052

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a1cc11c1af6e'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=320), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('tags',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('color', sa.String(length=32), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('owner_id', 'name', name='uq_tag_owner_name')
    )
    op.create_index(op.f('ix_tags_owner_id'), 'tags', ['owner_id'], unique=False)
    op.create_table('task_lists',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('sort_order', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('owner_id', 'name', name='uq_tasklist_owner_name')
    )
    op.create_index(op.f('ix_task_lists_owner_id'), 'task_lists', ['owner_id'], unique=False)
    op.create_table('tasks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('list_id', sa.UUID(), nullable=False),
    sa.Column('parent_id', sa.UUID(), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('todo', 'in_progress', 'done', 'blocked', name='task_status'), nullable=False),
    sa.Column('priority', sa.Enum('low', 'medium', 'high', 'urgent', name='task_priority'), nullable=False),
    sa.Column('due_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('archived', sa.Boolean(), nullable=False),
    sa.Column('sort_order', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['list_id'], ['task_lists.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_id'], ['tasks.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_task_due_at', 'tasks', ['due_at'], unique=False)
    op.create_index('ix_task_list_sort', 'tasks', ['list_id', 'sort_order'], unique=False)
    op.create_index('ix_task_priority', 'tasks', ['priority'], unique=False)
    op.create_index('ix_task_status', 'tasks', ['status'], unique=False)
    op.create_index(op.f('ix_tasks_list_id'), 'tasks', ['list_id'], unique=False)
    op.create_index(op.f('ix_tasks_parent_id'), 'tasks', ['parent_id'], unique=False)
    op.create_table('artifacts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('task_id', sa.UUID(), nullable=True),
    sa.Column('list_id', sa.UUID(), nullable=True),
    sa.Column('kind', sa.Enum('file', 'link', name='artifact_kind'), nullable=False),
    sa.Column('uri', sa.Text(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('mime_type', sa.String(length=128), nullable=True),
    sa.Column('size_bytes', sa.BigInteger(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('(task_id IS NOT NULL AND list_id IS NULL) OR (task_id IS NULL AND list_id IS NOT NULL)', name='ck_artifact_exactly_one_parent'),
    sa.ForeignKeyConstraint(['list_id'], ['task_lists.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_artifacts_list_id'), 'artifacts', ['list_id'], unique=False)
    op.create_index(op.f('ix_artifacts_task_id'), 'artifacts', ['task_id'], unique=False)
    op.create_table('notes',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('task_id', sa.UUID(), nullable=True),
    sa.Column('list_id', sa.UUID(), nullable=True),
    sa.Column('body', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('(task_id IS NOT NULL AND list_id IS NULL) OR (task_id IS NULL AND list_id IS NOT NULL)', name='ck_note_exactly_one_parent'),
    sa.ForeignKeyConstraint(['list_id'], ['task_lists.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_notes_list_id'), 'notes', ['list_id'], unique=False)
    op.create_index(op.f('ix_notes_task_id'), 'notes', ['task_id'], unique=False)
    op.create_table('task_tags',
    sa.Column('task_id', sa.UUID(), nullable=False),
    sa.Column('tag_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('task_id', 'tag_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('task_tags')
    op.drop_index(op.f('ix_notes_task_id'), table_name='notes')
    op.drop_index(op.f('ix_notes_list_id'), table_name='notes')
    op.drop_table('notes')
    op.drop_index(op.f('ix_artifacts_task_id'), table_name='artifacts')
    op.drop_index(op.f('ix_artifacts_list_id'), table_name='artifacts')
    op.drop_table('artifacts')
    op.drop_index(op.f('ix_tasks_parent_id'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_list_id'), table_name='tasks')
    op.drop_index('ix_task_status', table_name='tasks')
    op.drop_index('ix_task_priority', table_name='tasks')
    op.drop_index('ix_task_list_sort', table_name='tasks')
    op.drop_index('ix_task_due_at', table_name='tasks')
    op.drop_table('tasks')
    op.drop_index(op.f('ix_task_lists_owner_id'), table_name='task_lists')
    op.drop_table('task_lists')
    op.drop_index(op.f('ix_tags_owner_id'), table_name='tags')
    op.drop_table('tags')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###

